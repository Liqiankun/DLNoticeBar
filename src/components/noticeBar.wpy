<style lang="less">
.notice-bar-ctn {
  display: flex;
  width: 100%;
  height: 46rpx;
  background-color: #FFF6D1;
  padding-top: 16rpx;
  padding: 0 30rpx;
  box-sizing: border-box;
  justify-content: flex-start;
  align-items: center;
}

.notice-bar-ctn .notifi-icon {
  width: 30rpx;
  height: 30rpx;
  margin-right: 20rpx;
}

.notice-bar-ctn .close-icon {
  width: 16rpx;
  height: 16rpx;
  padding-left: 20rpx;
}

.notice-bar-ctn .text-ctn {
  display: flex;
  flex: 1;
  height: 30rpx;
  margin-left: 10rpx;
  box-sizing: border-box;
  overflow: hidden;
}

.notice-bar-ctn .text-ctn .text {
  font-size: 20rpx;
  color: #f66f6c;
  line-height: 30rpx;
}

</style>
<template>
  <view class='notice-bar-ctn' wx:if='{{show}}'>
    <block wx:if='{{leftIcon}}'>
      <image src='{{leftIcon}}' class='notifi-icon' />
    </block>
    <view class='text-ctn'>
      <view class='text' animation="{{ animationData }}">{{text}}</view>
    </view>
    <block wx:if='{{closeable}}'>
      <image src='../images/close.png' @tap='onClose' class='close-icon' />
    </block>
  </view>
</template>
<script>
import wepy from 'wepy'

export default class NoticeBar extends wepy.component {
  props = {
    text: {
      type: String,
      default: ''
    },
    delay: {
      type: Number,
      default: 0
    },
    speed: {
      type: Number,
      default: 15
    },
    closeable: {
      type: Boolean,
      default: false
    },
    leftIcon: {
      type: String,
      default: null
    }
  }

  data = {
    animation: null,
    textCtnWidth: undefined,
    textWidth: undefined,
    elapse: undefined,
    timer: null,
    animationData: null,
    show: true
  }

  methods = {
    animate () {
      wepy.createSelectorQuery()
          .select('.text-ctn')
          .boundingClientRect((rect) => {
            if (!rect) {
              return
            }
            this.textCtnWidth = rect.width

            wepy.createSelectorQuery()
                .select('.text')
                .boundingClientRect((_rect) => {
                  if (!_rect) {
                    return
                  }
                  this.textWidth = _rect.width
                  const elapse = this.textWidth / this.speed * 1000;
                  const animation = wepy.createAnimation({
                    duration: elapse,
                    timeingFunction: 'linear',
                    delay: this.delay
                  })
                  const resetAnimation = wepy.createAnimation({
                    duration: 0,
                    timeingFunction: 'linear'
                  })
                  this.animation = animation
                  this.resetAnimation = resetAnimation
                  this.elapse = elapse

                  const scroll = () => {
                    var _resetAnimation = this.resetAnimation
                    _resetAnimation.translateX(this.textCtnWidth).step()
                    const animationData = this.animation.translateX(-(this.elapse * this.speed) / 1000).step()
                    this.animationData = _resetAnimation.export()

                    setTimeout(() => {
                      this.animationData = animationData.export()
                      this.$apply()
                    }, 100)

                    const timer = setTimeout(() => {
                      scroll()
                    }, this.elapse)
                    this.timer = timer

                    this.$apply()
                  }

                  scroll()

                }).exec()
          }).exec()
    },

    onClose () {
      this.show = false
    }
  }

  onLoad () {
  }

  onUnload () {
    this.timer && clearTimeout(this.timer)
  }
}

</script>
